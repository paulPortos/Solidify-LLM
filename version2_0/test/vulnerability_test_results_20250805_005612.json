{
  "total_tests": 8,
  "correct_detections": 0,
  "partial_detections": 0,
  "missed_detections": 8,
  "detailed_results": [
    {
      "test_name": "Reentrancy Attack",
      "vulnerability_type": "Reentrancy",
      "severity": "High",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "reentrancy",
        "reentrancy attack",
        "state change after external call"
      ],
      "model_response": "Vulnerability: Incorrect Checksum on Contract Source Code\n\nTarget: Secure Financial Services\n\nDescription: This contract, `VulnerableBank`, exposes its source code to be manipulated without proper ver...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Integer Overflow",
      "vulnerability_type": "Integer Overflow",
      "severity": "High",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "integer overflow",
        "overflow",
        "arithmetic overflow",
        "unchecked math"
      ],
      "model_response": "Vulnerability: Incorrect Checksum on Contract Source Code\n\nTarget: Secure Token Project (https://github.com/SecureTokenProject/SecureToken)\n\nDescription: This patch corrects the checksum issue on the ...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Price Manipulation",
      "vulnerability_type": "Price Manipulation",
      "severity": "High",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "price manipulation",
        "oracle manipulation",
        "flash loan",
        "spot price"
      ],
      "model_response": "Vulnerability: Incorrect Reserves Check\n\nTarget Attack Contract: 0x7F4c9aA6d0E0bDedCfB53d85d0A4d084b4b4298D \n\nDescription: The issue here is that the code checks the reserves in the `getReserves` call...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Access Control Missing",
      "vulnerability_type": "Access Control",
      "severity": "Critical",
      "accuracy": 0.25,
      "found_vulnerabilities": [
        "unauthorized access"
      ],
      "expected_vulnerabilities": [
        "access control",
        "missing modifier",
        "unauthorized access",
        "no owner check"
      ],
      "model_response": "Vulnerability: Unauthorized Access to `owner`\n\nTarget: The code in question is a Solidity contract called \"VulnerableContract\" which has an internal variable `owner` that is set to `msg.sender`. This ...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Denial of Service",
      "vulnerability_type": "Denial of Service",
      "severity": "Medium",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "denial of service",
        "dos",
        "failed transfer",
        "external call failure"
      ],
      "model_response": "Vulnerability: Unauthorized Bidders\n\nTarget Contract: VulnerableAuction\n\nDescription: This vulnerability allows an attacker to become the winner of the auction by bidding above the price that would be...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Timestamp Dependence",
      "vulnerability_type": "Timestamp Dependence",
      "severity": "Low",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "timestamp dependence",
        "block.timestamp",
        "miner manipulation",
        "temporal vulnerability"
      ],
      "model_response": "Vulnerability: Unauthorized Access to the Time Lock Function\n\nTarget: The `deposit` function in the `VulnerableTimeLock` contract.\n\nDescription: This specific function exposes the `lockTime` mapping, ...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Unchecked Return Value",
      "vulnerability_type": "Unchecked Return Value",
      "severity": "Medium",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "unchecked return",
        "failed transfer",
        "silent failure",
        "return value"
      ],
      "model_response": "Vulnerability: Incorrect check of `amount` in the `distributeTokens` function.\n\nImpact: This vulnerability allows an attacker to directly withdraw all or most of the tokens from the contract, potentia...",
      "result_category": "\u274c MISSED"
    },
    {
      "test_name": "Front Running",
      "vulnerability_type": "Front Running",
      "severity": "Medium",
      "accuracy": 0.0,
      "found_vulnerabilities": [],
      "expected_vulnerabilities": [
        "front running",
        "mev",
        "transaction ordering",
        "mempool"
      ],
      "model_response": "Vulnerability: Unauthorized Revealing of Commitment\n\nDescription: The given Solidity code exposes the `commit` function in the `VulnerableCommitReveal` contract, allowing an attacker to change the rev...",
      "result_category": "\u274c MISSED"
    }
  ],
  "accuracy_by_type": {
    "Reentrancy": 0.0,
    "Integer Overflow": 0.0,
    "Price Manipulation": 0.0,
    "Access Control": 0.25,
    "Denial of Service": 0.0,
    "Timestamp Dependence": 0.0,
    "Unchecked Return Value": 0.0,
    "Front Running": 0.0
  },
  "overall_accuracy": 0.03125
}